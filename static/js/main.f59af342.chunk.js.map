{"version":3,"sources":["ring.svg","components/Store.js","components/Pagination.js","components/Filtering.js","components/Table.js","components/Company.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","stateContext","createContext","loadingContext","errorContext","dataPreparingContext","Store","children","useState","loading","setLoading","error","setError","dataPreparing","setDataPreparing","finalState","setFinalState","newIdArray","array","Object","values","map","element","id","incomeDataFetch","arrayID","dataState","finalScores","todayDate","Date","todayMonth","getMonth","todayYear","getFullYear","responses","i","counter","axios","get","then","response","data","totalIncome","incomes","reduce","total","currentValue","parseFloat","value","averageIncome","lastMonthIncome","date","dateMonth","dateYear","toFixed","catch","length","Promise","all","useEffect","Provider","Pagination","rowsPerPage","totalRows","setCurrentPage","currentPage","pageNumbers","Math","ceil","push","getFirstAndLastItem","number","className","onClick","Filtering","setFilterWord","type","placeholder","onChange","e","target","Table","props","setActualLocation","history","location","pathname","state","useContext","setData","sortDirection","setSortDirection","fieldToSort","setFieldToSort","filterWord","sortByField","field","sortedData","slice","sort","a","b","getSortIndicator","undefined","filteredData","filter","toString","search","toLowerCase","name","city","filterList","actualLocation","src","loader","alt","height","width","indexOfLastRow","indexOfFirstRow","currentRows","key","to","renderTableData","Company","incomeData","setIncomeData","isDataReady","setIsDataReady","startDate","setStartDate","endDate","setEndDate","company","match","params","index","totalIncomeInRange","moment","isBetween","current","averageIncomeInRange","diff","handleChange","sortedIncomes","format","useHistory","onSubmit","preventDefault","min","max","goBack","App","exact","path","render","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f59af342.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ring.90c2963b.svg\";","import React, { createContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Store = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [dataPreparing, setDataPreparing] = useState(true);\n  const [finalState, setFinalState] = useState({});\n\n  const fetchCompanyList = () => {\n    axios\n      .get(\"https://recruitment.hal.skygate.io/companies\")\n      .then((response) => {\n        setLoading(false);\n        setError(\"\");\n        return response.data;\n      })\n      .then((data) => {\n        const dataArray = newIdArray(data);\n\n        return [dataArray, data];\n      })\n      .then((data) => {\n        incomeDataFetch(data[0], data[1]);\n      })\n      .catch(() => {\n        setLoading(false);\n        setFinalState(\"\");\n        setError(true);\n      });\n  };\n\n  const newIdArray = (array) => {\n    return Object.values(array).map((element) => element.id);\n  };\n\n  const incomeDataFetch = (arrayID, dataState) => {\n    const finalScores = dataState;\n    const todayDate = new Date();\n    const todayMonth = todayDate.getMonth() + 1;\n    const todayYear = todayDate.getFullYear();\n    const responses = [];\n\n    for (let i = 0; i <= arrayID.length - 1; i++) {\n      let counter = arrayID[i];\n\n      responses[i] = axios\n        .get(`https://recruitment.hal.skygate.io/incomes/${counter}`)\n        .then((response) => {\n          if (!response.data) {\n            return;\n          }\n          //setting total income\n          const totalIncome = Object.values(response.data.incomes).reduce(\n            (total, currentValue) => {\n              currentValue = parseFloat(currentValue.value);\n              return total + currentValue;\n            },\n            0\n          );\n\n          //setting average income\n          const averageIncome = totalIncome / 12;\n\n          //setting last month income\n          const lastMonthIncome = Object.values(response.data.incomes).reduce(\n            (total, currentValue) => {\n              //setting dates to sum last month income\n              const date = new Date(currentValue.date);\n              const dateMonth = date.getMonth() + 1;\n              const dateYear = date.getFullYear();\n\n              if (todayMonth - dateMonth === 5 && todayYear === dateYear) {\n                total += parseFloat(currentValue.value);\n              }\n              return total;\n            },\n            0\n          );\n\n          finalScores[i].totalIncome = parseFloat(totalIncome.toFixed(2));\n          finalScores[i].averageIncome = parseFloat(averageIncome.toFixed(2));\n          finalScores[i].lastMonthIncome = parseFloat(\n            lastMonthIncome.toFixed(2)\n          );\n        })\n        .catch(() => {\n          setError(true);\n        });\n    }\n\n    Promise.all(responses).then(() => {\n      setFinalState(finalScores);\n      setDataPreparing(false);\n    });\n  };\n\n  useEffect(() => {\n    fetchCompanyList();\n  }, []);\n\n  return (\n    <errorContext.Provider value={error}>\n      <dataPreparingContext.Provider value={dataPreparing}>\n        <stateContext.Provider value={finalState}>\n          <loadingContext.Provider value={loading}>\n            {children}\n          </loadingContext.Provider>\n        </stateContext.Provider>\n      </dataPreparingContext.Provider>\n    </errorContext.Provider>\n  );\n};\n\nexport const stateContext = createContext();\nexport const loadingContext = createContext();\nexport const errorContext = createContext();\nexport const dataPreparingContext = createContext();\nexport default Store;\n","import React from \"react\";\nimport \"../Pagination.css\";\n\nfunction Pagination({rowsPerPage, totalRows, setCurrentPage, currentPage}) {\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(totalRows / rowsPerPage); i++) {\n        pageNumbers.push(i);\n    }\n\n    const getFirstAndLastItem = (number, array) => {\n        if (number === 0) {\n            return 1;\n        }\n        if (number === array.length + 1) {\n            return array.length;\n        }\n        return number;\n    };\n\n    return (\n        <div className=\"pagination\">\n            <button onClick={() => setCurrentPage(1)}>first</button>\n\n            <button\n                onClick={() =>\n                    setCurrentPage(getFirstAndLastItem(currentPage - 1, pageNumbers))\n                }\n            >\n                ≪\n            </button>\n\n            <p>\n                page {currentPage} of {pageNumbers.length}\n            </p>\n            <button\n                onClick={() =>\n                    setCurrentPage(getFirstAndLastItem(currentPage + 1, pageNumbers))\n                }\n            >\n                ≫\n            </button>\n            <button onClick={() => setCurrentPage(pageNumbers.length)}>last</button>\n        </div>\n    );\n}\n\nexport default Pagination;\n","import React from \"react\";\r\nimport \"../Filtering.css\";\r\n\r\nfunction Filtering({setFilterWord, setCurrentPage}) {\r\n    return (\r\n        <div className=\"filtering\">\r\n            <p>Filter your data here: </p>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                onChange={(e) => {\r\n                    setFilterWord(e.target.value);\r\n                    setCurrentPage(1)\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filtering;\r\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { dataPreparingContext, errorContext, stateContext } from \"./Store\";\nimport { Link} from \"react-router-dom\";\n\nimport Pagination from \"./Pagination\";\nimport \"../Table.css\";\nimport loader from \"../ring.svg\";\nimport Filtering from \"./Filtering\";\n\nfunction Table(props) {\n  useEffect(() => props.setActualLocation(props.history.location.pathname), []);\n\n  const state = useContext(stateContext);\n  const error = useContext(errorContext);\n  const dataPreparing = useContext(dataPreparingContext);\n\n  const [data, setData] = useState([]);\n  const [sortDirection, setSortDirection] = useState(\"ascending\");\n  const [fieldToSort, setFieldToSort] = useState();\n\n  const [filterWord, setFilterWord] = useState(\"\");\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rowsPerPage] = useState(15);\n\n  //sorting\n\n  const sortByField = (field) => {\n    setFieldToSort(field);\n    let sortedData = data.slice().sort((a, b) => {\n      if (a[field] < b[field]) {\n        return sortDirection === \"ascending\" ? -1 : 1;\n      }\n      if (a[field] > b[field]) {\n        return sortDirection === \"ascending\" ? 1 : -1;\n      }\n      return 0;\n    });\n    setData(sortedData);\n\n    sortDirection === \"ascending\"\n      ? setSortDirection(\"descending\")\n      : setSortDirection(\"ascending\");\n  };\n\n  const getSortIndicator = (field) => {\n    return field === fieldToSort ? sortDirection : undefined;\n  };\n\n  //filtering\n\n  const filterList = (array) => {\n    let filteredData = Object.values(array);\n    filteredData = filteredData.filter((data) => {\n      return (\n        data.id.toString().search(filterWord.toLowerCase()) !== -1 ||\n        data.name.toLowerCase().search(filterWord.toLowerCase()) !== -1 ||\n        data.city.toLowerCase().search(filterWord.toLowerCase()) !== -1 ||\n        data.totalIncome.toString().search(filterWord.toLowerCase()) !== -1 ||\n        data.averageIncome.toString().search(filterWord.toLowerCase()) !== -1 ||\n        data.lastMonthIncome.toString().search(filterWord.toLowerCase()) !== -1\n      );\n    });\n    setData(filteredData);\n  };\n\n  const renderTableData = () => {\n    //pagination\n    const indexOfLastRow = currentPage * rowsPerPage;\n    const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n    const currentRows = data.slice(indexOfFirstRow, indexOfLastRow);\n\n    return Object.values(currentRows).map((data) => {\n      const {\n        id,\n        name,\n        city,\n        totalIncome,\n      } = data;\n//&#8594;\n      return (\n        <tr key={`row ${id}`}>\n          <td key={`${id}.${id}`}>{id}</td>\n          <td key={`${id}.${name}`}>{name}</td>\n          <td key={`${id}.${city}`}>{city}</td>\n          <td key={`${id}.${totalIncome}`}>{totalIncome}</td>\n          <td key={`${id}.details`}>\n            <Link to={`/${id}`}>\n              <button>View details</button>\n            </Link>\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  useEffect(() => {\n    filterList(state);\n  }, [filterWord]);\n\n\n  useEffect(() => {\n    if (state) {\n      setData(state);\n    }\n  }, [state, props.actualLocation]);\n\n  useEffect(() => {\n    sortByField(\"totalIncome\");\n  }, [dataPreparing]);\n\n\n  //preventing from render when server doesn't respond\n  if (error) {\n    return (\n      <div>\n        <p>Retrieving data was unsuccessful. Check internet connection.</p>\n      </div>\n    );\n  }\n\n  //preventing from render when data is not prepared yet\n  if (dataPreparing) {\n    return (\n      <div>\n        <img\n          src={loader}\n          alt=\"loading_indicator\"\n          height=\"100px\"\n          width=\"100px\"\n        />\n        <p>Preparing your data. Please wait.</p>\n      </div>\n    );\n  }\n\n  return (\n    <Fragment>\n      <div className=\"tableContainer\">\n        <div>\n          <Filtering\n            setFilterWord={setFilterWord}\n            setCurrentPage={setCurrentPage}\n          />\n          <Pagination\n            rowsPerPage={rowsPerPage}\n            totalRows={data.length}\n            setCurrentPage={setCurrentPage}\n            currentPage={currentPage}\n          />\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th>\n                <button\n                  type=\"button\"\n                  onClick={() => sortByField(\"id\")}\n                  className={getSortIndicator(\"id\")}\n                >\n                  ID\n                </button>\n              </th>\n              <th>\n                <button\n                  type=\"button\"\n                  onClick={() => sortByField(\"name\")}\n                  className={getSortIndicator(\"name\")}\n                >\n                  Name\n                </button>\n              </th>\n              <th>\n                <button\n                  type=\"button\"\n                  onClick={() => sortByField(\"city\")}\n                  className={getSortIndicator(\"city\")}\n                >\n                  City\n                </button>\n              </th>\n              <th>\n                <button\n                  type=\"button\"\n                  onClick={() => sortByField(\"totalIncome\")}\n                  className={getSortIndicator(\"totalIncome\")}\n                >\n                  Total Income\n                </button>\n              </th>\n              <th>\n                <button type=\"button\">Details</button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{renderTableData()}</tbody>\n        </table>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Table;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { stateContext } from \"./Store\";\nimport { useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\n\nfunction Company(props) {\n  useEffect(() => props.setActualLocation(props.history.location.pathname), []);\n  const state = useContext(stateContext);\n  const [incomeData, setIncomeData] = useState([]);\n  const [isDataReady, setIsDataReady] = useState(false);\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n\n  const fetchData = (id) => {\n    axios\n      .get(`https://recruitment.hal.skygate.io/incomes/${id}`)\n      .then((response) => {\n        const sortedIncomes = response.data.incomes.sort((a, b) => {\n          let dateA = new Date(a.date);\n          let dateB = new Date(b.date);\n          return dateA > dateB ? 1 : -1;\n        });\n        setIncomeData(sortedIncomes);\n        setIsDataReady(true);\n        setStartDate(moment(sortedIncomes[0].date).format(\"YYYY-MM-DD\"));\n        setEndDate(\n          moment(sortedIncomes[sortedIncomes.length - 1].date).format(\n            \"YYYY-MM-DD\"\n          )\n        );\n      });\n\n    //todo handle error\n  };\n\n  const company = state\n    .filter((element) => element.id == props.match.params.id)\n    .map((data, index) => {\n      const {\n        id,\n        name,\n        city,\n        totalIncome,\n        averageIncome,\n        lastMonthIncome,\n      } = data;\n\n      return (\n        <div key={index}>\n          <h2>Company name: {name}</h2>\n          <p key={index.id}>Company id: {id}</p>\n          <p key={index.city}>City: {city}</p>\n          <p key={index.totalIncome}>Total income: {totalIncome}</p>\n          <p key={index.averageIncome}>Average income: {averageIncome}</p>\n          <p key={index.lastMonthIncome}>\n            Last month income: {lastMonthIncome}\n          </p>\n        </div>\n      );\n    });\n\n  const totalIncomeInRange = incomeData\n    .filter((element) => {\n      return moment(element.date).isBetween(\n        moment(startDate),\n        moment(endDate),\n        \"day\",\n        \"[]\"\n      );\n    })\n    .reduce((total, current) => {\n      const currentIncome = parseFloat(current.value);\n      return total + currentIncome;\n    }, 0)\n    .toFixed(2);\n\n  const numberOfMonthsInRange = moment(endDate).diff(\n    moment(startDate),\n    \"months\"\n  );\n\n  const averageIncomeInRange = (\n    totalIncomeInRange / numberOfMonthsInRange\n  ).toFixed(2);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  const handleChange = (e) => {\n    if (e.target.name === \"start\") {\n      setStartDate(e.target.value);\n    }\n    if (e.target.name === \"end\") {\n      setEndDate(e.target.value);\n    }\n  };\n\n  useEffect(() => {\n    fetchData(props.match.params.id);\n  }, []);\n\n  let history = useHistory();\n\n  if (!isDataReady) {\n    return \"Loading\";\n  }\n\n  if (isDataReady) {\n    return (\n      <>\n        <div className=\"companyView\">\n          <div className=\"incomeData\">{company}</div>\n          {isDataReady && (\n            <>\n              <form onSubmit={handleSubmit} className=\"incomeData\">\n                <label>\n                  <p>\n                    Start Date - first possible:{\" \"}\n                    {`${moment(incomeData[0].date).format(\"YYYY-MM-DD\")}`}\n                  </p>\n                  <input\n                    type=\"date\"\n                    name=\"start\"\n                    min={`${moment(incomeData[0].date).format(\"YYYY-MM-DD\")}`}\n                    max={`${moment(\n                      incomeData[incomeData.length - 1].date\n                    ).format(\"YYYY-MM-DD\")}`}\n                    onChange={handleChange}\n                  />\n                </label>\n                <label>\n                  <p>\n                    End Date - last possible{\" \"}\n                    {`${moment(incomeData[incomeData.length - 1].date).format(\n                      \"YYYY-MM-DD\"\n                    )}`}\n                  </p>\n                  <input\n                    type=\"date\"\n                    name=\"end\"\n                    min={`${moment(incomeData[0].date).format(\"YYYY-MM-DD\")}`}\n                    max={`${moment(\n                      incomeData[incomeData.length - 1].date\n                    ).format(\"YYYY-MM-DD\")}`}\n                    onChange={handleChange}\n                  />\n                </label>\n              </form>\n              <div className=\"incomeData\">\n                <p>Incomes between dates: </p>\n                <p>\n                  {`${startDate}`} and {`${endDate}`}\n                </p>\n\n                <p>Total: {totalIncomeInRange}</p>\n                <p>\n                  Average:{\" \"}\n                  {averageIncomeInRange == \"Infinity\"\n                    ? \"Choose at least one month range\"\n                    : averageIncomeInRange}\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n        <button onClick={() => history.goBack()}> ← take me back</button>\n      </>\n    );\n  }\n}\n\nexport default Company;\n","import React, { useState } from \"react\";\nimport \"../App.css\";\nimport Store from \"./Store\";\nimport Table from \"./Table\";\nimport Company from \"./Company\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [actualLocation, setActualLocation] = useState(\"\");\n  return (\n    <Router>\n      <Store>\n        <div className=\"App\">\n          <header className=\"appHeader\">\n            <h1>Table of data</h1>\n          </header>\n\n          <Switch>\n            <Route\n              exact\n              path=\"/table-data\"\n              render={(props) => (\n                <Table\n                  actualLocation={actualLocation}\n                  setActualLocation={setActualLocation}\n                  {...props}\n                />\n              )}\n            ></Route>\n            <Route\n              path=\"/:id\"\n              render={(props) => (\n                <Company\n                  actualLocation={actualLocation}\n                  setActualLocation={setActualLocation}\n                  {...props}\n                />\n              )}\n            ></Route>\n          </Switch>\n        </div>\n      </Store>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}